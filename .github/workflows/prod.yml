name: Production

# TODO: restore
# on: 
#   release:
#     types: [created]

# TODO: delete
on:
  push:
    branches:
      - chore/ecs

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: issues-api
  ECS_CLUSTER: production
  ECS_SERVICE: issues-api
  ECS_CONTAINER: issues-api
  TASK_FILE: task.json

permissions:
  id-token: write
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.ECR_ROLE }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR Private
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push docker image to Amazon ECR
        id: build-image
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: issues-api
        run: |
          image=$REGISTRY/${{ env.ECR_REPOSITORY }}:${{ github.event.release.tag_name }}
          image=$REGISTRY/${{ env.ECR_REPOSITORY }}:${{ github.sha }} # TODO: delete
          docker build -t $image .
          docker push $image
          echo "image=$image" >> $GITHUB_OUTPUT

      - name: Download task definition
        run: |
          aws ecs describe-task-definition --task-definition issues-api --query taskDefinition > ${{ env.TASK_FILE }}

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ${{ env.TASK_FILE }}
          container-name:  ${{ env.ECS_CONTAINER }}
          image: ${{ steps.build-image.outputs.image }}

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v2
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster:  ${{ env.ECS_CLUSTER }}
          # wait-for-service-stability: true